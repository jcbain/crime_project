ggplot(data = diamonds, x=color) + geom_bar(color = cut)
ggplot(data = diamonds, x=color) + geom_bar(color = cut)
qplot(x = color, data = diamonds)
qplot(x = color, data = diamonds, color = cut)
qplot(x = color, data = diamonds, color = cut, position = 'stack')
qplot(x = color, data = diamonds, color = cut, position = 'dodge')
qplot(x = color, data = diamonds, color = cut) + position_dodge()
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position='dodge')
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position='stack')
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position='identity')
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position='fill')
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position=c('fill','dodge'))
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position='dodge')
install.packages('plotly')
library(plotly)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
(gg <- ggplotly(p))
gg
ggplotly(p)
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity))) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
ggplotly(p)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
library(ggplot2)
library(plotly)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
names(diamonds)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = depth)
setwd(dir='Desktop/Spring 2016/CS 7001/Project_1/part_2/')
df13<-read.csv('output_data/new_2013.csv')
# histograms of super-types of crime
hist(df13$Crimes_Against_Persons/df13$Population1)
hist(df13$Crimes_Against_Persons/df13$Population)
hist(df13$Crimes_Against_Property/df13$Population)
hist(df13$Crimes_Against_Society/df13$Population)
df13
props<-df13[, 7:ncol(df13)]/(df13$Population * 100000) # first find the proportion for each crime per 100,000
prop13<-cbind(df13[,1:6],props)
plot(prop13$Population,prop13$Simple_Assault)
prop13$Population
prop13<-na.rm(cbind(df13[,1:6],props))
prop13<-na.omit(cbind(df13[,1:6],props))
prop13$Population
plot(prop13$Population,prop13$Simple_Assault)
hist(prop13$Population)
library(ggplot2)
library(plotly)
names(prop13)
plot_ly(prop13, x = Population, y = Rape, text = paste("Agency: ", Agency_Name),
mode = "markers", color = State)
plot_ly(prop13, x = Population, y = Sex_Offenses, text = paste("Agency: ", Agency_Name),
mode = "markers", color = State)
names(prop13)
plot_ly(prop13, x = Population, y = Robbery, text = paste("Agency: ", Agency_Name),
mode = "markers", color = State)
plot_ly(prop13, x = Crimes_Against_Persons, y = Crimes_Against_Property, text = paste("Agency: ", Agency_Name),
mode = "markers", color = State)
plot_ly(prop13, x = Crimes_Against_Persons, y = Population, text = paste("Agency: ", Agency_Name),
mode = "markers", color = State)
head(prop13)
props<-df13[, 7:ncol(df13)]/(df13$Population) # first find the proportion for each crime per 100,000
prop13<-na.omit(cbind(df13[,1:6],props))
plot_ly(prop13, x = Crimes_Against_Persons, y = Population, text = paste("Agency: ", Agency_Name),
mode = "markers", color = State)
plot_ly(prop13, x = Population, y = Crimes_Against_Persons, text = paste("Agency: ", Agency_Name),
mode = "markers", color = State)
plot_ly(prop13, x = Crimes_Against_Persons, color = State, type = "box")
plot_ly(prop13, x = Population, y = Crimes_Against_Persons, text = paste("Agency: ", Agency_Name),
mode = "markers", color = Agency_Type)
df13<-read.csv('output_data/new_2013.csv')
names(df13)
plot_ly(prop13, x = Crimes_Against_Persons, color = Region, type = "box")
props<-df13[, 7:ncol(df13)]/(df13$Population) # first find the proportion for each crime per 100,000
prop13<-na.omit(cbind(df13[,1:6],props))
plot_ly(prop13, x = Crimes_Against_Persons, color = Region, type = "box")
plot_ly(prop13, x = Crimes_Against_Persons, color = Region, type = "box")
names(prop13)
head(df13$Region)
head(prop13$Region)
props<-df13[, 7:ncol(df13)-1]/(df13$Population) # first find the proportion for each crime per 100,000
prop13<-na.omit(cbind(df13[,1:6],props))
plot_ly(prop13, x = Crimes_Against_Persons, color = Region, type = "box")
props<-df13[, 7:ncol(df13)-1]/(df13$Population) # first find the proportion for each crime per 100,000
prop13<-na.omit(cbind(df13[,c(1:6,ncol)],props))
ncol(df13)
prop13<-na.omit(cbind(df13[,c(1:6,69)],props))
df13<-read.csv('output_data/new_2013.csv')
props<-df13[, 7:ncol(df13)-1]/(df13$Population) # first find the proportion for each crime per 100,000
prop13<-na.omit(cbind(df13[,c(1:6,ncol(df13))],props))
plot_ly(prop13, x = Crimes_Against_Persons, color = Region, type = "box")
plot_ly(ggplot2::prop13, y = Crimes_Against_Persons, color = Region, type = "box")
plot_ly(prop13, y = Crimes_Against_Persons, color = Region, type = "box")
plot_ly(prop13, x = Region,y = Crimes_Against_Persons, color = State, type = "box") %>%
layout(boxmode = "group")
library(plotly)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(df, z = total.exports, text = hover, locations = code, type = 'choropleth',
locationmode = 'USA-states', color = total.exports, colors = 'Purples',
marker = list(line = l), colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
names(df)
head(df$state)
head(df$code)
state.abb[grep("New York", state.name)]
state.abb[grep("RHODE ISLAND", state.name)]
state.abb[grep("Rhode Island", state.name)]
df$13$States
df13$States
df13$State
cat(paste(capitalize(df13$State), collapse=" "), "\n")
install.packages('capitalize')
maketitle = function(txt){
theletters = strsplit(txt,'')[[1]]
wh = c(1,which(theletters  == ' ') + 1)
theletters[wh] = toupper(theletters[wh])
paste(theletters,collapse='')
}
maketitle("james bain")
apply(df13$State,maketitle)
apply(df13$State,1,maketitle)
apply(df13$State,1,function(txt){
theletters = strsplit(txt,'')[[1]]
wh = c(1,which(theletters  == ' ') + 1)
theletters[wh] = toupper(theletters[wh])
paste(theletters,collapse=''))
}
)
apply(df13$State,1,function(txt){
theletters = strsplit(txt,'')[[1]]
wh = c(1,which(theletters  == ' ') + 1)
theletters[wh] = toupper(theletters[wh])
paste(theletters,collapse=''))
}
apply(df13$State,1, function(txt){
theletters = strsplit(txt,'')[[1]]
wh = c(1,which(theletters  == ' ') + 1)
theletters[wh] = toupper(theletters[wh])
paste(theletters,collapse='')
}
)
apply(df13$State,0, function(txt){
theletters = strsplit(txt,'')[[1]]
wh = c(1,which(theletters  == ' ') + 1)
theletters[wh] = toupper(theletters[wh])
paste(theletters,collapse='')
}
)
lapply(df13$State,0, function(txt){
theletters = strsplit(txt,'')[[1]]
wh = c(1,which(theletters  == ' ') + 1)
theletters[wh] = toupper(theletters[wh])
paste(theletters,collapse='')
}
)
lapply(df13$State,1, function(txt){
theletters = strsplit(txt,'')[[1]]
wh = c(1,which(theletters  == ' ') + 1)
theletters[wh] = toupper(theletters[wh])
paste(theletters,collapse='')
}
)
lapply(df13$State, function(txt){
theletters = strsplit(txt,'')[[1]]
wh = c(1,which(theletters  == ' ') + 1)
theletters[wh] = toupper(theletters[wh])
paste(theletters,collapse='')
}
)
maketitle(c('james bain','cow dung'))
for (i in c('james bain','cow dung')){
maketitle(i)
}
for (i in c('james bain','cow dung')){
k = maketitle(i)
return(k)
}
for (i in c('james bain','cow dung')){
k = maketitle(i)
return(k)
}
for (i in c('james bain','cow dung')){
k = maketitle(i)
print(k)
}
for (i in c('james bain','cow dung')){
j = c()
k = maketitle(i)
append(j, k)
print(j)
}
j = c()
for (i in c('james bain','cow dung')){
k = maketitle(i)
append(j, k)
print(j)
}
j = list()
for (i in c('james bain','cow dung')){
k = maketitle(i)
append(j, k)
print(j)
}
for (i in c('james bain','cow dung')){
j = list()
k = maketitle(i)
append(j, k)
print(j)
}
for (i in c('james bain','cow dung')){
j = list(1,2,3)
k = maketitle(i)
append(j, k)
print(j)
}
for (i in df13$State){
j = list()
k = maketitle(i)
}
for (i in df13$State){
j = list()
k = maketitle(i)
print(k)
}
j<- c()
j
j<- c()
for (i in df13$State){
k = maketitle(i)
j[i]=k
print(j)
}
length(j)
j
for (i in df13$State){
k = maketitle(i)
print(k)
}
install.packages('chartr')
df13<-read.csv('output_data/new_2013.csv')
state.abb[grep("New York", state.name)]
state.abb[grep(df13$State, state.name)]
state.abb?
:
?state.abb
state.abb("New York")
for(i in df13$State){
print(state.abb[grep(i,state.name)])
}
j <-for(i in df13$State){
print(state.abb[grep(i,state.name)])
}
mybiglist <- list()
for(i in 1:5){
a <- runif(10)
b <- rnorm(16)
c <- rbinom(8, 5, i/10)
name <- paste('item:',i,sep='')
tmp <- list(uniform=a, normal=b, binomial=c)
mybiglist[[name]] <- tmp
}
mybiglist
mybiglist <- list()
for(i in 1:5){
mybiglist[[i]] <- i +1
}
mybiglist
mybiglist <- list()
for(i in 1:5){
mybiglist[i] <- i +1
}
mybiglist
mybiglist <- list()
for(i in 1:5){
mybiglist[i] <- i +1
}
mybiglist
mybiglist <- list()
for(i in 1:5){
mybiglist<- i +1
}
mybiglist
mybiglist <- list()
for(i in 1:5){
mybiglis[,i]t<- i +1
}
mybiglist <- list()
for(i in 1:5){
mybiglist[i,]t<- i +1
}
mybiglist <- list()
for(i in 1:5){
mybiglist[i,]<- i +1
}
mybiglist <- list()
for(i in 1:5){
mybiglist[i]<- i +1
}
length(mybiglist)
abbr<- list()
for(i in df13$State){
abbr[i]<-state.abb[grep(i,state.name)])
}
abbr<- list()
for(i in df13$State){
abbr[i]<-state.abb[grep(i,state.name)]
}
for(i in df13$State){
print(state.abb[grep(i,state.name)])
}
l <- list()
for(i in df13$State){
l[i]<-state.abb[grep(i,state.name)]
}
plot_ly(prop13, z = Crimes_Against_Persons, text = hover, locations = State, type = 'choropleth',
locationmode = 'USA-states', color = total.exports, colors = 'Purples',
marker = list(line = l), colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
plot_ly(prop13, z = Crimes_Against_Persons, locations = State, type = 'choropleth',
locationmode = 'USA-states', color = total.exports, colors = 'Purples',
marker = list(line = l), colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
plot_ly(prop13, z = Crimes_Against_Persons, locations = State, type = 'choropleth',
locationmode = 'USA-states', colors = 'Purples',
marker = list(line = l), colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
plot_ly(prop13, z = Crimes_Against_Persons, locations = State, type = 'choropleth',
locationmode = 'USA-states', colors = 'Purples',
marker = list(line = l), color = Crimes_Against_Persons,colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
plot_ly(prop13, z = Crimes_Against_Persons, locations = State, type = 'choropleth',
locationmode = 'USA-states', color = Crimes_Against_Persons,colors = 'Purples',
marker = list(line = l),colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(df, z = total.exports, text = hover, locations = code, type = 'choropleth',
locationmode = 'USA-states', color = total.exports, colors = 'Purples',
marker = list(line = l), colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(prop13, z = Crimes_Against_Persons, locations = State, type = 'choropleth',
locationmode = 'USA-states', color = Crimes_Against_Persons,colors = 'Purples',
marker = list(line = l),colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
plot_ly(df13, z = Crimes_Against_Persons, locations = State, type = 'choropleth',
locationmode = 'USA-states', color = Crimes_Against_Persons,colors = 'Purples',
marker = list(line = l),colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(df, z = total.exports, text = hover, locations = code, type = 'choropleth',
locationmode = 'USA-states', color = total.exports, colors = 'Purples',
marker = list(line = l), colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
plot_ly(df13, z = Crimes_Against_Persons, type = 'choropleth',
locationmode = 'USA-states', color = Crimes_Against_Persons,colors = 'Purples',
marker = list(line = l),colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
names(df)
plot_ly(df, z = total.exports, text = hover, locations = state, type = 'choropleth',
locationmode = 'USA-states', color = total.exports, colors = 'Purples',
marker = list(line = l), colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
plot_ly(df, z = total.exports, text = hover, locations = code, type = 'choropleth',
locationmode = 'USA-states', color = total.exports, colors = 'Purples',
marker = list(line = l), colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
setNames(state.abb, state.name)[df13$State]
setNames(state.abb)[df13$State]
setNames(state.abb,state.name)[df13$State]
grep(state.abb,state.name)[df13$State]
setNames(state.abb,state.name)[df13$State]
codes<-setNames(state.abb,state.name)[df13$State]
codes
codes[1]
codes<-match(state.abb,state.name)[df13$State]
codes
codes<-setNames(state.abb,state.name)[df13$State]
codes
state.abb[match(df13$State,state.name)]
df13$codes<-state.abb[match(df13$State,state.name)]
names(df13)
# transform counts into proportions (each offense/total population per 100,000 people)
props<-df13[, 7:ncol(df13)-2]/(df13$Population) # first find the proportion for each crime
prop13<-na.omit(cbind(df13[,c(1:6,69:70)],props))
plot_ly(df13, z = Crimes_Against_Persons,locations = codes, type = 'choropleth',
locationmode = 'USA-states', color = Crimes_Against_Persons,colors = 'Purples',
marker = list(line = l),colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
plot_ly(df, z = total.exports, text = hover, locations = code, type = 'choropleth',
locationmode = 'USA-states', color = total.exports, colors = 'Purples',
marker = list(line = l), colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
head(df$hover)
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(prop13, z = Crimes_Against_Persons,locations = codes, type = 'choropleth',
locationmode = 'USA-states', color = Crimes_Against_Persons,colors = 'Purples',
marker = list(line = l),colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
plot_ly(prop13, z = Crimes_Against_Persons,locations = codes, type = 'choropleth',
locationmode = 'USA-states', color = Crimes_Against_Persons,colors = 'Purples',
marker = list(line = l),colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
plot_ly(prop13, z = Crimes_Against_Persons,locations = codes, type = 'choropleth',
locationmode = 'USA-states', color = Crimes_Against_Persons,colors = 'PuOr',
marker = list(line = l),colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
plot_ly(prop13, z = Crimes_Against_Property,locations = codes, type = 'choropleth',
locationmode = 'USA-states', color = Crimes_Against_Property,colors = 'PuOr',
marker = list(line = l),colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
plot_ly(df13, z = Crimes_Against_Property,locations = codes, type = 'choropleth',
locationmode = 'USA-states', color = Crimes_Against_Property,colors = 'PuOr',
marker = list(line = l),colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
names(df13)
plot_ly(df13, z = Shoplifting,locations = codes, type = 'choropleth',
locationmode = 'USA-states', color = Shoplifting,colors = 'PuOr',
marker = list(line = l),colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
df13$codes
plot_ly(df13, z = Population,locations = codes, type = 'choropleth',
locationmode = 'USA-states', color = Population,colors = 'PuOr',
marker = list(line = l),colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
df13$codes<-as.factor(state.abb[match(df13$State,state.name)] )
props<-df13[, 7:ncol(df13)-2]/(df13$Population) # first find the proportion for each crime
prop13<-na.omit(cbind(df13[,c(1:6,69:70)],props))
plot_ly(df13, z = Population,locations = codes, type = 'choropleth',
locationmode = 'USA-states', color = Population,colors = 'PuOr',
marker = list(line = l),colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
aggregate(df13$Population,by=df13$codes,FUN = sum )
