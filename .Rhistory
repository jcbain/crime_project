qplot(displ,hwy,data=mpg,size= class, color = class)
qplot(displ,hwy,data=mpg,size= class, color = class, shape = class)
qplot(displ,hwy,data=mpg,size= class, color = class, alpha = class)
qplot(displ,hwy,data=mpg, color = class, alpha = class)
qplot(displ,hwy,data=mpg, color = class, alpha = class + facet_grid(.~cyl))
qplot(displ,hwy,data=mpg) + facet_grid(.~cyl)
qplot(displ,hwy,data=mpg = color = class) + facet_grid(.~cyl)
qplot(displ,hwy,data=mpg ,color = class) + facet_grid(.~cyl)
qplot(displ,hwy,data=mpg ,color = class) + facet_grid(.~drv)
qplot(displ,hwy,data=mpg ,color = class) + facet_grid(drv~cyl)
qplot(displ,hwy,data=mpg ,color = class) + facet_wrap(drv~cyl)
qplot(displ,hwy,data=mpg ,color = class) + facet_grid(drv~cyl)
summary(iris)
qplot(Sepal.Length,Sepal.Width, data = iris, color = Species)
qplot(Sepal.Length,Sepal.Width, data = iris, color = Species)+ facet_grid(Petal.Length~Petal.Width)
qplot(displ,hwy,data=mpg ,color = class, geom = 'smooth') + facet_grid(drv~cyl)
qplot(displ,hwy,data=mpg ,color = class, geom = 'smooth')
qplot(displ,hwy,data=mpg ,color = class, geom = 'smooth') + facet_grid(class)
qplot(displ,hwy,data=mpg ,color = class, geom = 'smooth') + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = 'smooth', geom= 'point') + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = 'point', ) + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = 'smooth', ) + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = 'smooth' ) + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = ('point','smooth') ) + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = c('point','smooth') ) + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = c('point','boxplot') ) + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = c('point','boxplot') )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class, geom = c('point','boxplot') )# + facet_grid(class~.)
qplot(reorder(class,hwy),class,hwy,data=mpg ,color = class, geom = c('point','boxplot') )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class, geom = c('point','boxplot') )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class,reorder(class,hwy), geom = c('point','boxplot') )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class,reorder(hwy,class), geom = c('point','boxplot') )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class,reorder(hwy,class), geom = 'boxplot' )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class,reorder(mpg$hwy,mpg$class), geom = 'boxplot' )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
?reorder
qplot(reorder(hwy, FUN = median),class,hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
qplot(reorder(class,hwy, FUN = median),hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
qplot(reorder(class,hwy, FUN = mean),hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
qplot(reorder(class,hwy, FUN = sd),hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
qplot(reorder(class,-hwy, FUN = sd),hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
qplot(reorder(class,hwy, FUN = sd),hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
qplot(hwy,data=mpg,binwidth = 1)
qplot(hwy,data=mpg,binwidth = 2)
qplot(hwy,data=mpg,binwidth = 1)
qplot(carat, data = diamonds)
qplot(depth, data = diamonds)
qplot(depth, data = diamonds, binwidth = .1)
qplot(depth, data = diamonds, binwidth = .2)
qplot(depth, data = diamonds, binwidth = .2,color = cut)
qplot(depth, data = diamonds, binwidth = .2,fill = cut)
qplot(depth, data = diamonds, binwidth = .2,color = 'blue')
qplot(depth, data = diamonds, binwidth = .2,color = i('blue'))
qplot(depth, data = diamonds, binwidth = .2,color = I('blue'))
qplot(depth, data = diamonds, binwidth = .2,color = I('green'))
qplot(depth, data = diamonds, binwidth = .2,color = I('green'),fill = I('red'))
qplot(depth, data = diamonds, binwidth = .2,color = I('white'),fill = I('black'))
qplot(depth, data = diamonds, binwidth = .2,color = I('black'),fill = I('white'))
qplot(data = economics, aes(date,unemploy)) + geom_line()
economics
qplot(data = economics, aes(x=date,y=unemploy)) + geom_line()
names(economics)
summary(economics)
qplot(economics, x=date,y=unemploy)
qplot(data=economics, x=date,y=unemploy)
qplot(data=economics, x=date,y=unemploy) + geom_line()
getwd()
pl<-qplot(data=economics, x=date,y=unemploy) + geom_line()
ggsave('Desktop/plot.pdf', plot= pl)
summary(diamonds)
ggplot(data = diamonds, aes(x = color)) + geom_bar(color = cut)
ggplot(data = diamonds, x=color + geom_bar(color = cut)
ggplot(data = diamonds, x=color) + geom_bar(color = cut)
ggplot(data = diamonds, x=color) + geom_bar(color = cut)
qplot(x = color, data = diamonds)
qplot(x = color, data = diamonds, color = cut)
qplot(x = color, data = diamonds, color = cut, position = 'stack')
qplot(x = color, data = diamonds, color = cut, position = 'dodge')
qplot(x = color, data = diamonds, color = cut) + position_dodge()
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position='dodge')
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position='stack')
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position='identity')
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position='fill')
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position=c('fill','dodge'))
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position='dodge')
install.packages('plotly')
library(plotly)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
(gg <- ggplotly(p))
gg
ggplotly(p)
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity))) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
ggplotly(p)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
library(ggplot2)
library(plotly)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
names(diamonds)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = depth)
setwd(dir='Desktop/Spring 2016/CS 7001/Project_1/part_2/')
library(klaR)
library(party)
library(rpart)
library(mlbench)
library(caret)
library(ggplot2)
library(plotly)
library(caret)
library(Hmisc)
EqualFreq <- function(x,n){ # x is the feature vector, and n is the number of bins
nx <- length(x)
nrepl <- floor(nx/n)
nplus <- sample(1:n,nx - nrepl*n)
nrep <- rep(nrepl,n)
nrep[nplus] <- nrepl+1
x[order(x)] <- rep(seq.int(n),nrep)
x
}
#######################
## READ IN THE FILES ##
#######################
## read in a year of the data ##
p12<-read.csv('output_data/prop12.csv')
p13<-read.csv('output_data/prop13.csv')
p14<-read.csv('output_data/prop14.csv')
## read in a year of the data ##
df12<-read.csv('output_data/new_2012.csv')
df13<-read.csv('output_data/new_2013.csv')
df14<-read.csv('output_data/new_2014.csv')
## create state codes ##
df12$codes<-as.factor(state.abb[match(df12$State,state.name)] )
df13$codes<-as.factor(state.abb[match(df13$State,state.name)] )
df14$codes<-as.factor(state.abb[match(df14$State,state.name)] )
## aggregate some data based on the sum of offenses per each state ##
states12<-aggregate(cbind(Population, Total_Offenses,Crimes_Against_Persons,Crimes_Against_Property,Crimes_Against_Society)~codes, data=df12, sum, na.rm=TRUE)
states13<-aggregate(cbind(Population, Total_Offenses,Crimes_Against_Persons,Crimes_Against_Property,Crimes_Against_Society)~codes, data=df13, sum, na.rm=TRUE)
states14<-aggregate(cbind(Population, Total_Offenses,Crimes_Against_Persons,Crimes_Against_Property,Crimes_Against_Society)~codes, data=df14, sum, na.rm=TRUE)
## find proportions based off of population for each state ##
proStates12<-states12[,3:ncol(states12)]/states12$Population
prost12<-cbind(states12[,1:2],proStates12)
proStates13<-states13[,3:ncol(states13)]/states13$Population
prost13<-cbind(states13[,1:2],proStates13)
proStates14<-states14[,3:ncol(states13)]/states14$Population
prost14<-cbind(states14[,1:2],proStates14)
prost<-rbind(prost12,prost13,prost14)
df<-subset(p14, select=c('Agency_Type','codes','Region','Population','Crimes_Against_Persons',
'Crimes_Against_Property','Crimes_Against_Society','Total_Offenses',
'Homicide_Offenses', 'Murder_and_Nonnegligent_Manslaughter',
'Negligent_Manslaughter','Justifiable_Homicide'))
df<-na.omit(df)
fit<- ctree(Crimes_Against_Persons ~ Population + Region, data = df)
print(fit)
plot(fit)
iris_ctree <- ctree(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data=iris)
print(iris_ctree)
plot(iris_ctree)
fit<- ctree(Crimes_Against_Persons ~ Population + Crimes_Against_Society, data = df)
print(fit)
plot(fit)
x<-subset(df,select = -Crimes_Against_Persons)
y<-EqualFreq(df$Crimes_Against_Persons,2)
model<-svm(x,y)
require(e1071)
model<-svm(x,y)
df<-subset(p14, select=c('Agency_Type','codes','Region','Population','Crimes_Against_Persons',
'Crimes_Against_Property','Crimes_Against_Society','Total_Offenses',
'Homicide_Offenses', 'Murder_and_Nonnegligent_Manslaughter',
'Negligent_Manslaughter','Justifiable_Homicide'))
df<-na.omit(df)
x<-subset(df,select = -Crimes_Against_Persons)
y<-EqualFreq(df$Crimes_Against_Persons,2)
model<-svm(x,y)
as.data.frame(sapply(df, function(y) (sum(length(which(is.na(y)))))))
x<-subset(df,select = c(Crimes_Against_Property, Population))
y<-EqualFreq(df$Crimes_Against_Persons,2)
model<-svm(x,y)
summary(model)
plot(model)
plot(x,y)
df$discr<-EqualFreq(df$Murder_and_Nonnegligent_Manslaughter,5)
df$discr<-as.factor(df$discr)
## create a subset of data ##
sub = sample(nrow(df), floor(nrow(df) * 0.6))
## 1 part of the subset will be a training the other will be a test ##
train<-df[sub,]
test<-df[-sub,]
xTrain<-subset(train,select=c("Population","codes"))
yTrain<-as.factor(train$discr)
xTest<-subset(test,select=c("Population","codes"))
yTest<-as.factor(test$discr)
model = train(xTrain,yTrain,'nb',trControl=trainControl(method='cv',number=10))
model
prop.table(table(predict(model$finalModel,xTest)$class,yTest))
df<-df[df$Murder_and_Nonnegligent_Manslaughter >0,]
## discritize crimes against persons ##
df$discr<-EqualFreq(df$Murder_and_Nonnegligent_Manslaughter,5)
df$discr<-as.factor(df$discr)
## create a subset of data ##
sub = sample(nrow(df), floor(nrow(df) * 0.6))
## 1 part of the subset will be a training the other will be a test ##
train<-df[sub,]
test<-df[-sub,]
xTrain<-subset(train,select=c("Population","codes"))
yTrain<-as.factor(train$discr)
xTest<-subset(test,select=c("Population","codes"))
yTest<-as.factor(test$discr)
model = train(xTrain,yTrain,'nb',trControl=trainControl(method='cv',number=10))
model
prop.table(table(predict(model$finalModel,xTest)$class,yTest))
prop.table(table(predict(model$finalModel,xTest)$class,yTest))
table(predict(model$finalModel,xTest)$class,yTest)
max(df$Murder_and_Nonnegligent_Manslaughter[df$discr==1])
max(df$Murder_and_Nonnegligent_Manslaughter[df$discr==2])
max(df$Murder_and_Nonnegligent_Manslaughter[df$discr==3])
max(df$Murder_and_Nonnegligent_Manslaughter[df$discr==4])
max(df$Murder_and_Nonnegligent_Manslaughter[df$discr==5])
plot_ly(df, x = Population, color = factor(discr), type = "box")
hist(log10(p14$Simple_Assault))
hist(log10(p14$Population))
hist(log2(p14$Population))
hist(log2(p14$Simple_Assault))
df<-subset(p14, select=c('Agency_Type','codes','Region','Population','Crimes_Against_Persons',
'Crimes_Against_Property','Crimes_Against_Society','Total_Offenses',
'Homicide_Offenses', 'Murder_and_Nonnegligent_Manslaughter',
'Negligent_Manslaughter','Justifiable_Homicide'))
df<-na.omit(df)
df<-df[df$Murder_and_Nonnegligent_Manslaughter >0,]
## discritize crimes against persons ##
df$discr<-EqualFreq(df$Murder_and_Nonnegligent_Manslaughter,5)
max(df$Murder_and_Nonnegligent_Manslaughter[df$discr]==1)
max(df$Murder_and_Nonnegligent_Manslaughter[df$discr]==2)
max(df$Murder_and_Nonnegligent_Manslaughter[df$discr]==3)
df<-na.omit(df)
df<-df[df$Murder_and_Nonnegligent_Manslaughter >0,]
df$discr<-EqualFreq(df$Murder_and_Nonnegligent_Manslaughter,5)
df$discr<-as.factor(df$discr)
max(df$Murder_and_Nonnegligent_Manslaughter[df$discr]==1)
setwd(dir='Desktop/Spring 2016/CS 7001/Project_1/part_2/')
library(klaR)
library(party)
library(rpart)
library(mlbench)
library(caret)
library(ggplot2)
library(plotly)
library(caret)
library(Hmisc)
require(e1071)
EqualFreq <- function(x,n){ # x is the feature vector, and n is the number of bins
nx <- length(x)
nrepl <- floor(nx/n)
nplus <- sample(1:n,nx - nrepl*n)
nrep <- rep(nrepl,n)
nrep[nplus] <- nrepl+1
x[order(x)] <- rep(seq.int(n),nrep)
x
}
setwd(dir='Desktop/Spring 2016/CS 7001/Project_1/part_2/')
library(klaR)
library(party)
library(rpart)
library(mlbench)
library(caret)
library(ggplot2)
library(plotly)
library(caret)
library(Hmisc)
require(e1071)
######################
## CUSTOM FUNCTIONS ##
######################
## a function to discritize a feature into equal binning based ##
EqualFreq <- function(x,n){ # x is the feature vector, and n is the number of bins
nx <- length(x)
nrepl <- floor(nx/n)
nplus <- sample(1:n,nx - nrepl*n)
nrep <- rep(nrepl,n)
nrep[nplus] <- nrepl+1
x[order(x)] <- rep(seq.int(n),nrep)
x
}
#######################
## READ IN THE FILES ##
#######################
## read in a year of the data ##
p12<-read.csv('output_data/prop12.csv')
p13<-read.csv('output_data/prop13.csv')
p14<-read.csv('output_data/prop14.csv')
## read in a year of the data ##
df12<-read.csv('output_data/new_2012.csv')
df13<-read.csv('output_data/new_2013.csv')
df14<-read.csv('output_data/new_2014.csv')
## create state codes ##
df12$codes<-as.factor(state.abb[match(df12$State,state.name)] )
df13$codes<-as.factor(state.abb[match(df13$State,state.name)] )
df14$codes<-as.factor(state.abb[match(df14$State,state.name)] )
## aggregate some data based on the sum of offenses per each state ##
states12<-aggregate(cbind(Population, Total_Offenses,Crimes_Against_Persons,Crimes_Against_Property,Crimes_Against_Society)~codes, data=df12, sum, na.rm=TRUE)
states13<-aggregate(cbind(Population, Total_Offenses,Crimes_Against_Persons,Crimes_Against_Property,Crimes_Against_Society)~codes, data=df13, sum, na.rm=TRUE)
states14<-aggregate(cbind(Population, Total_Offenses,Crimes_Against_Persons,Crimes_Against_Property,Crimes_Against_Society)~codes, data=df14, sum, na.rm=TRUE)
## find proportions based off of population for each state ##
proStates12<-states12[,3:ncol(states12)]/states12$Population
prost12<-cbind(states12[,1:2],proStates12)
proStates13<-states13[,3:ncol(states13)]/states13$Population
prost13<-cbind(states13[,1:2],proStates13)
proStates14<-states14[,3:ncol(states13)]/states14$Population
prost14<-cbind(states14[,1:2],proStates14)
prost<-rbind(prost12,prost13,prost14)
df<-subset(p14, select=c('Agency_Type','codes','Region','Population','Crimes_Against_Persons',
'Crimes_Against_Property','Crimes_Against_Society','Total_Offenses',
'Homicide_Offenses', 'Murder_and_Nonnegligent_Manslaughter',
'Negligent_Manslaughter','Justifiable_Homicide'))
df<-na.omit(df)
df<-df[df$Murder_and_Nonnegligent_Manslaughter >0,]
max(df$Murder_and_Nonnegligent_Manslaughter[df$discr]==1)
max(df$Murder_and_Nonnegligent_Manslaughter[df$discr]==1)
df
length(df)
nrow(df)
nrow
names(df)
df$discr<-EqualFreq(df$Murder_and_Nonnegligent_Manslaughter,5)
names(df)
max(df$Murder_and_Nonnegligent_Manslaughter[df$discr==1])
max(df$Murder_and_Nonnegligent_Manslaughter[df$discr==2])
max(df$Murder_and_Nonnegligent_Manslaughter[df$discr==3])
max(df$Murder_and_Nonnegligent_Manslaughter[df$discr==4])
max(df$Murder_and_Nonnegligent_Manslaughter[df$discr==5])
order(df$discr)
df$discr
df$disc<- factor(df$discr,
levels = c(1,2,3,4,5),
labels = c("< 3.134367e-05","< 5.273844e-05","< 9.168564e-05","< 0.0001800504","< 0.008196721"))
df$disc
sub = sample(nrow(df), floor(nrow(df) * 0.6))
train<-df[sub,]
test<-df[-sub,]
xTrain<-subset(train,select=c("Population","codes"))
yTrain<-as.factor(train$discr)
yTrain<-as.factor(train$disc)
xTest<-subset(test,select=c("Population","codes"))
yTest<-as.factor(test$disc)
model = train(xTrain,yTrain,'nb',trControl=trainControl(method='cv',number=10))
prop.table(table(predict(model$finalModel,xTest)$class,yTest))
table(predict(model$finalModel,xTest)$class,yTest)
model
plot_ly(df, x = Population, color = factor(disc), type = "box")
a <- list(
autotick = FALSE,
ticks = "outside",
tick0 = 0,
dtick = 0.25,
ticklen = 5,
tickwidth = 2,
tickcolor = toRGB("blue")
)
s
plot_ly(df, x = Population, color = factor(disc), type = "box") %>%
layout(xaxis = a, yaxis = a)
ggplot(df, aes(x =Population, color= factor(disc))) + geom_bar()
ggplot(df, aes(x =Population, color= factor(disc))) + geom_boxplot()
ggplot(df, aes(x =Population, color= disc)) + geom_boxplot()
ggplot(df, aes(x =Population, colour=disc)) + geom_boxplot()
ggplot(df, aes(Population, colour=disc)) + geom_boxplot()
ggplot(data=df, aes(x =Population, color= disc)) + geom_boxplot()
ggplot(data=df, aes(x =Population, color= discr)) + geom_boxplot()
ggplot(data=df, aes(x =Population, color= discr)) + geom_histogram()
ggplot(data=df, aes(x =Population)) + geom_histogram(aes(color=disc))
ggplot(data=df, aes(x =Population)) + geom_boxplot(aes(color=disc))
ggplot(data=df, aes(x =Population)) + geom_boxplot(aes(color=disc))
ggplot(data=df, aes(x =Population)) + geom_count(aes(color=disc))
ggplot(data=df, aes(x =Population, y = Murder_and_Nonnegligent_Manslaughter)) + geom_point()
ggplot(data=df, aes(x =Population, y = Murder_and_Nonnegligent_Manslaughter)) + geom_point() + facet_wrap(~ disc)
p<-ggplot(data=df, aes(x =Population, y = Murder_and_Nonnegligent_Manslaughter)) + geom_point() + facet_wrap(~ disc)
gg <- ggplotly(p)
ggplotly()
p<-ggplot(data=df, aes(x =Population, y = disc)) + geom_boxplot()
p
p<-ggplot(data=df, aes(x =Population, y = disc, color = disc)) + geom_boxplot()
p
p<-ggplot(data=df, aes(x =Population, y = disc, color = disc))
p+geom_boxplot()
p<-ggplot(data=df, aes(x =Population, y = factor(disc), color = disc))
p+geom_boxplot()
set.seed(1234)
dat <- data.frame(cond = factor(rep(c("A","B"), each=200)), rating = c(rnorm(200),rnorm(200, mean=.8)))
ggplot(dat, aes(x=cond, y=rating, fill=cond)) + geom_boxplot()
ggplotly()
ggplotly()
p<-ggplot(data=df, aes(x =Population, y = factor(disc), fill = disc)) + geom_boxplot()
p
y
plot_ly(df, x = Population, color = factor(disc), type = "box")
plot_ly(df, x = Population, color = factor(discr), type = "box")
plot_ly(df, x = Population, color = factor(disc), type = "box")
qplot(df,x=Population,y = disc, geom = boxplot())
qplot(df,x=Population,y = disc, geom = boxplot(x = Population))
qplot(df,x=Population,y = disc, geom = boxplot(df,x = Population))
qplot(df,x=Population,y = disc, geom = boxplot(data=df,x = Population))
ggplot(data=df, aes(x=Population,y=disc))+geom_boxplot()
ggplot(data=df, aes(x=Population,y=Murder_and_Nonnegligent_Manslaughter, fill = disc))+geom_boxplot()
ggplot(data=df, aes(x=Population, fill = disc))+geom_boxplot()
plot_ly(df, x = Population, color = factor(disc), type = "box")
f2 <- list(
family = "Old Standard TT, serif",
size = 10,
color = "black"
)
plot_ly(df, x = Population, color = factor(disc), type = "box") %>%
layout( yaxis = a, showlegend = FALSE)
layout( yaxis = FALSE, showlegend = FALSE)
plot_ly(df, x = Population, color = factor(disc), type = "box") %>%
layout( yaxis = FALSE, showlegend = FALSE)
plot_ly(df, x = Population, color = factor(disc), type = "box") %>%
layout( yaxis = FALSE)
f2 <- list(
family = "Old Standard TT, serif",
size = 0,
color = "black"
)
plot_ly(df, x = Population, color = factor(disc), type = "box") %>%
layout( yaxis = a)
f2 <- list(
family = "Old Standard TT, serif",
size = 0,
color = "white"
)
plot_ly(df, x = Population, color = factor(disc), type = "box") %>%
layout( yaxis = a)
ax <- list(
title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE
)
plot_ly(df, x = Population, color = factor(disc), type = "box") %>%
layout( yaxis = ax)
plot_ly(df, x = Population, color = factor(disc), type = "box") %>%
layout(title= "Murder Rate Per Capita ~ Population Size", yaxis = ax)
df<-subset(p14, select=c('Agency_Type','codes','Region','Population','Crimes_Against_Persons',
'Crimes_Against_Property','Crimes_Against_Society','Total_Offenses',
'Homicide_Offenses', 'Murder_and_Nonnegligent_Manslaughter',
'Negligent_Manslaughter','Justifiable_Homicide'))
df<-na.omit(df)
ncol(df)
nrow(df)
df<-df[df$Murder_and_Nonnegligent_Manslaughter >0,]
nrow(df)
3485-529
2956/3485
summary(model)
model
table(predict(model$finalModel,xTest)$class,yTest)
p14<-read.csv('output_data/prop14.csv')
dim(p14)
df2<-df[-df$Murder_and_Nonnegligent_Manslaughter >0,]
ncol(df2)
nrow(df2)
df2<-df[df$Murder_and_Nonnegligent_Manslaughter ==0,]
df2
df<-subset(p14, select=c('Agency_Type','codes','Region','Population','Crimes_Against_Persons',
'Crimes_Against_Property','Crimes_Against_Society','Total_Offenses',
'Homicide_Offenses', 'Murder_and_Nonnegligent_Manslaughter',
'Negligent_Manslaughter','Justifiable_Homicide'))
df<-na.omit(df)
df2<-df[df$Murder_and_Nonnegligent_Manslaughter ==0,]
df2
nrow(df2)
mean(df2$Population)
sd(df2$Population)
hist(df2$Population)
ggplot(data=df2, aes(x = Population)) + geom_histogram()
ggplot(data=df2, aes(x = Population)) + geom_histogram() +
geom_vline(aes(xintercept=mean(Population, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1)
ggplot(data=df2, aes(x = Population)) + geom_histogram() +
geom_vline(aes(xintercept=mean(Population, na.rm=T)),  color="red", linetype="dashed", size=1) +
ggtitle("Population for those Place with a 0 Murder Rate")
median(df2$Population)
summary(df2$Population)
names(p14)
df<-subset(p14, select=c('Agency_Type','Agency_Name','codes','Region','Population','Crimes_Against_Persons',
'Crimes_Against_Property','Crimes_Against_Society','Total_Offenses',
'Homicide_Offenses', 'Murder_and_Nonnegligent_Manslaughter',
'Negligent_Manslaughter','Justifiable_Homicide'))
df<-na.omit(df)
df2<-df[df$Murder_and_Nonnegligent_Manslaughter ==0,]
df2[df2$Population == 235400]
df2[df2$Population < 235400]
df2[df2$Population < 230000]
df2
df2$Agency_Name[df2$Population < 230000]
df2$Agency_Name[df2$Population > 230000]
df2$codes[df2$Population > 230000]
df2$codes[df2$Population < 9]
df2[df2$Population < 9]
df2$Agency_Name[df2$Population < 9]
