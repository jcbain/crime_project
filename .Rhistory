install.packages('klar')
install.packages('klaR')
library('klaR')
library('caret')
x = iris
x
months <- rep(1:12,3)
months <- rep(1:12,3)
months
months <- rep(1:12,2)
deaths<- c(1,2,3,4,5,6,6,5,4,3,2,1,1,2,3,4,5,6,6,5,4,3,2,1)
cbind(months,deaths)
sum(deaths[1:12])
sum(deaths[7:18])
deaths<- c(1,2,3,4,5,6,6,5,4,3,2,3,1,2,3,4,5,6,6,5,4,3,2,1)
cbind(months,deaths)
sum(deaths[1:12])
sum(deaths[1:12])
sum(deaths[7:18])
deaths<- c(1,2,3,4,5,6,6,5,4,3,2,3,1,2,3,5,5,6,6,5,4,3,2,1)
cbind(months,deaths)
deaths<- c(1,2,3,4,5,6,6,5,4,3,2,3,1,2,3,5,5,6,6,5,4,3,2,1)
sum(deaths[1:12])
sum(deaths[7:18])
mm<-260;mn<-1000;nn<-400
mm<-260;mn<-1000;nn<-400
fmm<-(mm/(mm+mn+nn));fmn<-(mn/(mm+mn+nn));fnn<-(nn/(mm+mn+nn))
p<-fmm+(.5*fmn);q<-fnn+(.5*fmn)
p2<-p^2;twopq<-2*p*q;q2<-q^2
p<-0.65;q<-0.35
fdomPhen<- p^2 + 2*p*q
domPhen<-190/1000
recPhen<-810/1000
q2<-recPhen
domPhen<-190/1000
recPhen<-810/1000
q2<-recPhen
q<-sqrt(q2);p<-1-q
twopq<-2*p*q;p2<-p^2
domPhen<-190/1000
recPhen<-810/1000
q2<-recPhen
q<-sqrt(q2);p<-1-q
twopq<-2*p*q;p2<-p^2
p<-0.95;q<-0.05
p2<-p^2;twopq<-2*p*q;q2<-q^2
flat<-p2*100;mod<-twopq*100;fizzy<-q2*100
fizzy<-p2*100;mod<-twopq*100;flat<-q2*100
eFiz<-fizzy*2000;eMod<-mod*2000;eFlat<-flat*2000
p<-0.95;q<-0.05
p2<-p^2;twopq<-2*p*q;q2<-q^2
fizzy<-p2*100;mod<-twopq*100;flat<-q2*100
## b ## 1 point
oFiz<-1000;oMod<-100;oFlat<-900
expected<-c(fizzy<-p2*100;mod<-twopq*100;flat<-q2*100)
exp<-c(fizzy,mod,flat)
obs<-c(oFiz,oMod,oFlat)
sum((((obs-exp)^2)/obs))
chi2<-sum((((obs-exp)^2)/obs))
exp
obs
fizzy<-p2*100;mod<-twopq*100;flat<-q2*100
eFiz<-p2*2000;eMod<-twopq*2000;eFlat<-q2*2000
exp<-c(eFiz,eMod,eFlat)
obs<-c(oFiz,oMod,oFlat)
chi2<-sum((((obs-exp)^2)/obs))
chi2<-sum((((obs-exp)^2)/exp))
obs
exp
fmm<-.25;fmn<-.60;fnn<-.15
fmm<-.25;fmn<-.60;fnn<-.15
p<-fmm + (.5*fmn); q<-fnn + (.5*fmn)
obs<-c(fmm*3000,fmn*3000,fnn*3000)
p2<-p^2;twopq<-2*p*q;q2<-q^2
exp<-c(p2*3000,2pq*3000,q2*3000)
exp<-c(p2*3000,twopq*3000,q2*3000)
chi2<-sum((((obs-exp)^2)/exp))
sQQ<-20;sQR<-35;sRR<-45
rQQ<-30;rQR<-65;rRR<-5
library(ggplot2)
?mpg
data <- mpg
mpg
data
qplot(disp,hwy,data=mpg)
qplot(disp;,hwy,data=mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,color = class)
qplot(displ,hwy,data=mpg,size= class)
qplot(displ,hwy,data=mpg,size= class, color = class)
qplot(displ,hwy,data=mpg,size= class, color = class, shape = class)
qplot(displ,hwy,data=mpg,size= class, color = class, alpha = class)
qplot(displ,hwy,data=mpg, color = class, alpha = class)
qplot(displ,hwy,data=mpg, color = class, alpha = class + facet_grid(.~cyl))
qplot(displ,hwy,data=mpg) + facet_grid(.~cyl)
qplot(displ,hwy,data=mpg = color = class) + facet_grid(.~cyl)
qplot(displ,hwy,data=mpg ,color = class) + facet_grid(.~cyl)
qplot(displ,hwy,data=mpg ,color = class) + facet_grid(.~drv)
qplot(displ,hwy,data=mpg ,color = class) + facet_grid(drv~cyl)
qplot(displ,hwy,data=mpg ,color = class) + facet_wrap(drv~cyl)
qplot(displ,hwy,data=mpg ,color = class) + facet_grid(drv~cyl)
summary(iris)
qplot(Sepal.Length,Sepal.Width, data = iris, color = Species)
qplot(Sepal.Length,Sepal.Width, data = iris, color = Species)+ facet_grid(Petal.Length~Petal.Width)
qplot(displ,hwy,data=mpg ,color = class, geom = 'smooth') + facet_grid(drv~cyl)
qplot(displ,hwy,data=mpg ,color = class, geom = 'smooth')
qplot(displ,hwy,data=mpg ,color = class, geom = 'smooth') + facet_grid(class)
qplot(displ,hwy,data=mpg ,color = class, geom = 'smooth') + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = 'smooth', geom= 'point') + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = 'point', ) + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = 'smooth', ) + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = 'smooth' ) + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = ('point','smooth') ) + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = c('point','smooth') ) + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = c('point','boxplot') ) + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = c('point','boxplot') )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class, geom = c('point','boxplot') )# + facet_grid(class~.)
qplot(reorder(class,hwy),class,hwy,data=mpg ,color = class, geom = c('point','boxplot') )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class, geom = c('point','boxplot') )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class,reorder(class,hwy), geom = c('point','boxplot') )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class,reorder(hwy,class), geom = c('point','boxplot') )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class,reorder(hwy,class), geom = 'boxplot' )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class,reorder(mpg$hwy,mpg$class), geom = 'boxplot' )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
?reorder
qplot(reorder(hwy, FUN = median),class,hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
qplot(reorder(class,hwy, FUN = median),hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
qplot(reorder(class,hwy, FUN = mean),hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
qplot(reorder(class,hwy, FUN = sd),hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
qplot(reorder(class,-hwy, FUN = sd),hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
qplot(reorder(class,hwy, FUN = sd),hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
qplot(hwy,data=mpg,binwidth = 1)
qplot(hwy,data=mpg,binwidth = 2)
qplot(hwy,data=mpg,binwidth = 1)
qplot(carat, data = diamonds)
qplot(depth, data = diamonds)
qplot(depth, data = diamonds, binwidth = .1)
qplot(depth, data = diamonds, binwidth = .2)
qplot(depth, data = diamonds, binwidth = .2,color = cut)
qplot(depth, data = diamonds, binwidth = .2,fill = cut)
qplot(depth, data = diamonds, binwidth = .2,color = 'blue')
qplot(depth, data = diamonds, binwidth = .2,color = i('blue'))
qplot(depth, data = diamonds, binwidth = .2,color = I('blue'))
qplot(depth, data = diamonds, binwidth = .2,color = I('green'))
qplot(depth, data = diamonds, binwidth = .2,color = I('green'),fill = I('red'))
qplot(depth, data = diamonds, binwidth = .2,color = I('white'),fill = I('black'))
qplot(depth, data = diamonds, binwidth = .2,color = I('black'),fill = I('white'))
qplot(data = economics, aes(date,unemploy)) + geom_line()
economics
qplot(data = economics, aes(x=date,y=unemploy)) + geom_line()
names(economics)
summary(economics)
qplot(economics, x=date,y=unemploy)
qplot(data=economics, x=date,y=unemploy)
qplot(data=economics, x=date,y=unemploy) + geom_line()
getwd()
pl<-qplot(data=economics, x=date,y=unemploy) + geom_line()
ggsave('Desktop/plot.pdf', plot= pl)
summary(diamonds)
ggplot(data = diamonds, aes(x = color)) + geom_bar(color = cut)
ggplot(data = diamonds, x=color + geom_bar(color = cut)
ggplot(data = diamonds, x=color) + geom_bar(color = cut)
ggplot(data = diamonds, x=color) + geom_bar(color = cut)
qplot(x = color, data = diamonds)
qplot(x = color, data = diamonds, color = cut)
qplot(x = color, data = diamonds, color = cut, position = 'stack')
qplot(x = color, data = diamonds, color = cut, position = 'dodge')
qplot(x = color, data = diamonds, color = cut) + position_dodge()
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position='dodge')
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position='stack')
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position='identity')
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position='fill')
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position=c('fill','dodge'))
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position='dodge')
install.packages('plotly')
library(plotly)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
(gg <- ggplotly(p))
gg
ggplotly(p)
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity))) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
ggplotly(p)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
library(ggplot2)
library(plotly)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
names(diamonds)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = depth)
grades<-c(98,49,83,96,99,81,89,87,94,76,65,78,91,82,82,100)
mean(grades)
sd(grades)
hist(grades)
grades2<-c(87,92,98,96,82,96,98,23,63,96,89,72,91,58,84,82,77)
mean(grades2)
sd(grades2)
hist(grades2)
grades<-c(98,49,83,96,99,81,89,87,94,76,65,78,91,82,82,100)
gradesam<-c(98,49,83,96,99,81,89,87,94,76,65,78,91,82,82,100)
mean(gradesam)
mean(gradespm)
gradespm<-c(87,92,98,96,82,96,98,23,63,96,89,72,91,58,84,82,77)
mean(gradespm)
median(gradesam)
sd(gradesam)
sd(gradesam)^2
am<-rep('am',16)
pm<-rep('pm',length(gradespm))
am<-rep('am',length(gradesam))
class<- rbind(am,pm)
class<- c(am,pm)
class
grades<- c(gradesam,gradespm)
midterm<-cbind(class,grades)
midterm
midterm<-as.data.frame(cbind(class,grades))
midterm
ggplot(data=midterm,aes(x=grades, colour=class)) +geom_density()
library(ggplot2)
ggplot(data=midterm,aes(x=grades, colour=class)) +geom_density()
ggplot(data=midterm,aes(x=grades, colour=class)) +geom_hist()
ggplot(data=midterm,aes(x=grades, colour=class)) +geom_histogram()
ggplot(data=midterm,aes(x=grade)) +geom_density()
ggplot(data=midterm,aes(x=grades)) +geom_density()
ggplot(data=midterm,aes(x=grades)) +stat_density()
ggplot(data=midterm,aes(x=grades)) +stat_density(aes(colour=class))
ggplot(data=midterm,aes(grades)) +stat_density(aes(colour=class))
ggplot(data=midterm,aes(grades)) +stat_histogram(aes(colour=class))
ggplot(data=midterm,aes(grades)) +geom_histogram(aes(colour=class))
midterm$grades<-as.numeric(midterm$grades)
ggplot(data=midterm,aes(grades)) +geom_histogram(aes(colour=class))
ggplot(data=midterm,aes(grades)) +geom_density(aes(colour=class))
ggplot(data=midterm,aes(grades)) +geom_density()
ggplot(data=midterm,aes(grades)) +geom_histogram()
midterm
gradesam<-c(98,49,83,96,99,81,89,87,94,76,65,78,91,82,82,100)
am<-rep('am',length(gradesam))
gradespm<-c(87,92,98,96,82,96,98,23,63,96,89,72,91,58,84,82,77)
pm<-rep('pm',length(gradespm))
class<- c(am,pm)
grades<- c(gradesam,gradespm)
grades
midterm<-as.data.frame(cbind(class,grades))
midterm
midterm$grades<-as.numeric(midterm$grades)
midterm
gradesam<-c(98,49,83,96,99,81,89,87,94,76,65,78,91,82,82,100)
mean(gradesam)
range(gradesam)
100-49
median(gradesam)
sd(gradesam)
histogram(gradesam)
histo(gradesam)
hist(gradesam)
gradespm<-c(87,92,98,96,82,96,98,23,63,96,89,72,91,58,84,82,77)
grades<-as.data.frame(gradespm)
grades
ggplot(grades,aes(x = gradespm)) + geom_density()
library(ggplot2)
ggplot(grades,aes(x = gradespm)) + geom_density()
grades<- as.data.frame(c(gradesam,gradespm))
ggplot(grades,aes(x = gradespm)) + geom_density()
grades<- c(gradesam,gradespm)
total <- as.data.frame(grades)
ggplot(data=total,aes(x=grades)) +geom_density()
x <- as.vector(rnorm(10000))
d <- as.data.frame(x=x)
library(ggplot2)
p <- ggplot(data = d) + theme_bw() +
geom_density(aes(x=x, y = ..density..), color = 'black')
# new code is below
q5 <- quantile(x,.05)
q95 <- quantile(x,.95)
medx <- median(x)
x.dens <- density(x)
df.dens <- data.frame(x = x.dens$x, y = x.dens$y)
p + geom_area(data = subset(df.dens, x >= q5 & x <= q95),
aes(x=x,y=y), fill = 'blue') +
geom_vline(xintercept = medx)
v <- ggplot(data = total) + theme_bw()+
geom_density(aes(x=grades, y = ..density..), color = 'black')
v
q5 <- quantile(grades,.05)
q95 <- quantile(grades,.95)
medx <- median(grades)
x.dens <- density(grades)
df.dens <- data.frame(x = x.dens$x, y = x.dens$y)
v+geom_area(data = subset(df.dens, x >= q5 & x <= q95),
aes(x=x,y=y), fill = 'blue') +
geom_vline(xintercept = medx)
q10 <- quantile(grades,.10)
q90 <- quantile(grades,.90)
medx <- median(grades)
x.dens <- density(grades)
df.dens <- data.frame(x = x.dens$x, y = x.dens$y)
v+geom_area(data = subset(df.dens, x >= q10 & x <= q90),
aes(x=x,y=y), fill = 'blue') +
geom_vline(xintercept = medx)
q125 <- quantile(grades,.125)
q875 <- quantile(grades,.875)
medx <- median(grades)
x.dens <- density(grades)
df.dens <- data.frame(x = x.dens$x, y = x.dens$y)
v+geom_area(data = subset(df.dens, x >= q125 & x <= q875),
aes(x=x,y=y), fill = 'blue') +
geom_vline(xintercept = medx)
v+geom_area(data = subset(df.dens, x >= q5 & x <= q95),
aes(x=x,y=y), fill = 'blue') +
geom_vline(xintercept = medx)
v+geom_area(data = subset(df.dens, x >= q125 & x <= q875),
aes(x=x,y=y), fill = '#00cc99') +
geom_vline(xintercept = medx)
ggplot(data=total,aes(x=grades)) +geom_density(aes(fill = '#ff0000'))
v <- ggplot(data = total) + theme_bw()+
geom_density(aes(x=grades, y = ..density..), color = 'black')
v+geom_area(data = subset(df.dens, x >= q125 & x <= q875),
aes(x=x,y=y), fill = '#00cc99') +
geom_vline(xintercept = medx)
v+geom_area(data = subset(df.dens, x >= q125 & x <= q875),
aes(x=x,y=y), fill = '#00cc99') +
geom_vline(xintercept = medx) +
geom_vline(xintercept = 84.275)
v+geom_area(data = subset(df.dens, x >= q125 & x <= q875),
aes(x=x,y=y), fill = '#00cc99') +
geom_vline(xintercept = medx) +
geom_vline(xintercept = 84.275, aes(fill = '#ff0000'))
v+geom_area(data = subset(df.dens, x >= q125 & x <= q875),
aes(x=x,y=y), fill = '#00cc99') +
geom_vline(xintercept = medx) +
geom_vline(xintercept = 84.275, aes(colour = '#ff0000'))
geom_vline(xintercept = 84.275, coulour = 'blue' aes(colour = '#ff0000'))
v+geom_area(data = subset(df.dens, x >= q125 & x <= q875),
aes(x=x,y=y), fill = '#00cc99') +
geom_vline(xintercept = medx) +
geom_vline(xintercept = 84.275, coulour = 'blue' )
v+geom_area(data = subset(df.dens, x >= q125 & x <= q875),
aes(x=x,y=y), fill = '#00cc99') +
geom_vline(xintercept = medx) +
geom_vline(xintercept = 84.275, aes(coulour = 'blue') )
v+geom_area(data = subset(df.dens, x >= q125 & x <= q875),
aes(x=x,y=y), fill = '#00cc99') +
geom_vline(xintercept = medx)
q10 <- quantile(grades,.10)
q1 <- quantile(grades,1)
medx <- median(grades)
x.dens <- density(grades)
df.dens <- data.frame(x = x.dens$x, y = x.dens$y)
v+geom_area(data = subset(df.dens, x >= q10 & x <= q1),
aes(x=x,y=y), fill = '#00cc99') +
geom_vline(xintercept = medx)
gradespm<-c(87,92,98,96,82,96,98,23,63,96,89,72,91,58,84,82,77)
mean(gradespm)
median(gradespm)
sd(gradespm)
range(gradespm)
98-23
setwd(dir='Desktop/Spring 2016/CS 7001/Project_1/part_2/')
library(klaR)
library(party)
library(rpart)
library(mlbench)
library(caret)
library(ggplot2)
library(plotly)
library(caret)
library(Hmisc)
require(e1071)
EqualFreq <- function(x,n){ # x is the feature vector, and n is the number of bins
nx <- length(x)
nrepl <- floor(nx/n)
nplus <- sample(1:n,nx - nrepl*n)
nrep <- rep(nrepl,n)
nrep[nplus] <- nrepl+1
x[order(x)] <- rep(seq.int(n),nrep)
x
}
## read in a year of the data ##
p12<-read.csv('output_data/prop12.csv')
p13<-read.csv('output_data/prop13.csv')
p14<-read.csv('output_data/prop14.csv')
names(p14)
unique(p14$Agency_Type)
EqualFreq <- function(x,n){ # x is the feature vector, and n is the number of bins
nx <- length(x)
nrepl <- floor(nx/n)
nplus <- sample(1:n,nx - nrepl*n)
nrep <- rep(nrepl,n)
nrep[nplus] <- nrepl+1
x[order(x)] <- rep(seq.int(n),nrep)
x
}
df_13<-subset(p13, select=c('Agency_Type','Agency_Name','codes','Region','Population','Crimes_Against_Persons',
'Crimes_Against_Property','Crimes_Against_Society','Total_Offenses',
'Homicide_Offenses', 'Murder_and_Nonnegligent_Manslaughter',
'Negligent_Manslaughter','Justifiable_Homicide'))
df_14<-subset(p14, select=c('Agency_Type','Agency_Name','codes','Region','Population','Crimes_Against_Persons',
'Crimes_Against_Property','Crimes_Against_Society','Total_Offenses',
'Homicide_Offenses', 'Murder_and_Nonnegligent_Manslaughter',
'Negligent_Manslaughter','Justifiable_Homicide'))
df_13<-na.omit(df_13)
df_13<-df_13[df$Murder_and_Nonnegligent_Manslaughter >0,]
df_13
head(df_13)
df_13<-df_13[df$Murder_and_Nonnegligent_Manslaughter >0,]
df_13<-df_13[df_13$Murder_and_Nonnegligent_Manslaughter >0,]
ncol(df_13)
as.data.frame(sapply(p12, function(y) (sum(length(which(is.na(y)))))))
ncol(df12)
ncol(p12)
nrow(df_13)
df_13<-subset(p13, select=c('Agency_Type','Agency_Name','codes','Region','Population','Crimes_Against_Persons',
'Crimes_Against_Property','Crimes_Against_Society','Total_Offenses',
'Homicide_Offenses', 'Murder_and_Nonnegligent_Manslaughter',
'Negligent_Manslaughter','Justifiable_Homicide'))
df_13<-na.omit(df_13)
df_13<-df_13[df_13$Murder_and_Nonnegligent_Manslaughter >0,]
df_14<-subset(p14, select=c('Agency_Type','Agency_Name','codes','Region','Population','Crimes_Against_Persons',
'Crimes_Against_Property','Crimes_Against_Society','Total_Offenses',
'Homicide_Offenses', 'Murder_and_Nonnegligent_Manslaughter',
'Negligent_Manslaughter','Justifiable_Homicide'))
df_14<-na.omit(df_14)
df_14<-df_14[df_14$Murder_and_Nonnegligent_Manslaughter >0,]
nrow(p12)
1838/5235
names(p14)
setwd(dir='Desktop/Spring 2016/CS 7001/Project_1/part_2/')
library(ggplot2)
library(plotly)
library(reshape2)
df14<-read.csv('output_data/new_2014.csv')
df14$codes<-as.factor(state.abb[match(df14$State,state.name)] )
states14<-aggregate(cbind(Population, Murder_and_Nonnegligent_Manslaughter,Crimes_Against_Persons,Negligent_Manslaughter,Homicide_Offenses)~codes, data=df14, sum, na.rm=TRUE)
proStates14<-states14[,3:ncol(states14)]/states14$Population
prost14<-cbind(states14[,1:2],proStates14)
props14<-df14[, 6:68]/(df14$Population)
prop14<-cbind(df14[,c(1:5,69:70)],props14)
l <- list(color = toRGB("black"), width = .5)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('gray')
)
names(prost14)
plot_ly(prost14, z = Murder_and_Nonnegligent_Manslaughter,locations = codes, text=paste0('<br>Population: ', Population), type = 'choropleth',
locationmode = 'USA-states', color = Murder_and_Nonnegligent_Manslaughter,colors = 'Reds',
marker = list(line = l),colorbar = list(title = "Total Offenses Rate")) %>%
layout(title = '2014 Murder Rates per Capita<br>(Hover for breakdown)', geo = g)
prost14
proStates14<-(states14[,3:ncol(states14)]/states14$Population)*100000
prost14<-cbind(states14[,1:2],proStates14)
# give state boundaries a black border
l <- list(color = toRGB("black"), width = .5)
l <- list(color = toRGB("black"), width = .5)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('gray')
)
plot_ly(prost14, z = Murder_and_Nonnegligent_Manslaughter,locations = codes, text=paste0('<br>Population: ', Population), type = 'choropleth',
locationmode = 'USA-states', color = Murder_and_Nonnegligent_Manslaughter,colors = 'Reds',
marker = list(line = l),colorbar = list(title = "Total Offenses Rate")) %>%
layout(title = '2014 Murder Rates per Capita<br>(Hover for breakdown)', geo = g)
plot_ly(prost14, z = Murder_and_Nonnegligent_Manslaughter,locations = codes, text=paste0('<br>Population: ', Population), type = 'choropleth',
locationmode = 'USA-states', color = Murder_and_Nonnegligent_Manslaughter,colors = 'Reds',
marker = list(line = l),colorbar = list(title = "Total Offenses Rate")) %>%
layout(title = '2014 Murder Rates per 100,000 Individuals', geo = g)
plot_ly(prost14, z = Negligent_Manslaughter,locations = codes, text=paste0('<br>Population: ', Population), type = 'choropleth',
locationmode = 'USA-states', color = Negligent_Manslaughter,colors = 'Reds',
marker = list(line = l),colorbar = list(title = "Total Offenses Rate")) %>%
layout(title = '2014 Negligent Manslaughter Rates <br> per 100,000 Individuals', geo = g)
plot_ly(prost14, z = Negligent_Manslaughter,locations = codes, text=paste0('<br>Population: ', Population), type = 'choropleth',
locationmode = 'USA-states', color = Negligent_Manslaughter,colors = 'Purples',
marker = list(line = l),colorbar = list(title = "Total Offenses Rate")) %>%
layout(title = '2014 Negligent Manslaughter Rates <br> per 100,000 Individuals', geo = g)
plot_ly(prost14, z = Murder_and_Nonnegligent_Manslaughter,locations = codes, text=paste0('<br>Population: ', Population), type = 'choropleth',
locationmode = 'USA-states', color = Murder_and_Nonnegligent_Manslaughter,colors = 'Reds',
marker = list(line = l),colorbar = list(title = "Total Murder Rate")) %>%
layout(title = '2014 Murder Rates per 100,000 Individuals', geo = g)
plot_ly(prost14, z = Negligent_Manslaughter,locations = codes, text=paste0('<br>Population: ', Population), type = 'choropleth',
locationmode = 'USA-states', color = Negligent_Manslaughter,colors = 'Purples',
marker = list(line = l),colorbar = list(title = "Total Manslaughter Rate")) %>%
layout(title = '2014 Negligent Manslaughter Rates <br> per 100,000 Individuals', geo = g)
plot_ly(prost14, z = Negligent_Manslaughter,locations = codes, text=paste0('<br>Population: ', Population), type = 'choropleth',
locationmode = 'USA-states', color = Negligent_Manslaughter,colors = 'Blues',
marker = list(line = l),colorbar = list(title = "Total Manslaughter Rate")) %>%
layout(title = '2014 Negligent Manslaughter Rates <br> per 100,000 Individuals', geo = g)
names(prost14)
plot_ly(prost14, z = Homicide_Offenses,locations = codes, text=paste0('<br>Population: ', Population), type = 'choropleth',
locationmode = 'USA-states', color = Homicide_Offenses,colors = 'Purples',
marker = list(line = l),colorbar = list(title = "Total Homicide Rate")) %>%
layout(title = '2014 Negligent Manslaughter Rates <br> per 100,000 Individuals', geo = g)
plot_ly(prost14, z = Homicide_Offenses,locations = codes, text=paste0('<br>Population: ', Population), type = 'choropleth',
locationmode = 'USA-states', color = Homicide_Offenses,colors = 'Purples',
marker = list(line = l),colorbar = list(title = "Total Homicide Rate")) %>%
layout(title = '2014 Homicide Rates <br> per 100,000 Individuals', geo = g)
