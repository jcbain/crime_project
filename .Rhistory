"# this is some test data",
"M, O, N, K, E, Y",
"D, O, N, K, E, Y",
"M, A, K, E",
"M, U, C, K, Y",
"C, O, O, K, I, E",
sep="\n")
cat(data)
write(data, file = "demo_basket")
tr <- read.transactions("demo_basket", format = "basket", sep=",", skip = 1,  rm.duplicates = TRUE)
inspect(tr)
rules <- apriori(tr, parameter= list(supp=0.6, conf=0.8))
inspect(rules)
data
cat(data)
## read demo data (skip comment line)
tr <- read.transactions("demo_basket", format = "basket", sep=",", skip = 1,  rm.duplicates = TRUE)
inspect(tr)
rules <- apriori(tr, parameter= list(supp=0.6, conf=0.8))
inspect(rules)
install.packages('caret')
library('klar')
library('caret')
library('caret')
install.packages('pbkrtest')
install.packages("pbkrtest")
library('klar')
library('caret')
install.packages('klar')
install.packages('klaR')
library('klaR')
library('caret')
x = iris
x
months <- rep(1:12,3)
months <- rep(1:12,3)
months
months <- rep(1:12,2)
deaths<- c(1,2,3,4,5,6,6,5,4,3,2,1,1,2,3,4,5,6,6,5,4,3,2,1)
cbind(months,deaths)
sum(deaths[1:12])
sum(deaths[7:18])
deaths<- c(1,2,3,4,5,6,6,5,4,3,2,3,1,2,3,4,5,6,6,5,4,3,2,1)
cbind(months,deaths)
sum(deaths[1:12])
sum(deaths[1:12])
sum(deaths[7:18])
deaths<- c(1,2,3,4,5,6,6,5,4,3,2,3,1,2,3,5,5,6,6,5,4,3,2,1)
cbind(months,deaths)
deaths<- c(1,2,3,4,5,6,6,5,4,3,2,3,1,2,3,5,5,6,6,5,4,3,2,1)
sum(deaths[1:12])
sum(deaths[7:18])
mm<-260;mn<-1000;nn<-400
mm<-260;mn<-1000;nn<-400
fmm<-(mm/(mm+mn+nn));fmn<-(mn/(mm+mn+nn));fnn<-(nn/(mm+mn+nn))
p<-fmm+(.5*fmn);q<-fnn+(.5*fmn)
p2<-p^2;twopq<-2*p*q;q2<-q^2
p<-0.65;q<-0.35
fdomPhen<- p^2 + 2*p*q
domPhen<-190/1000
recPhen<-810/1000
q2<-recPhen
domPhen<-190/1000
recPhen<-810/1000
q2<-recPhen
q<-sqrt(q2);p<-1-q
twopq<-2*p*q;p2<-p^2
domPhen<-190/1000
recPhen<-810/1000
q2<-recPhen
q<-sqrt(q2);p<-1-q
twopq<-2*p*q;p2<-p^2
p<-0.95;q<-0.05
p2<-p^2;twopq<-2*p*q;q2<-q^2
flat<-p2*100;mod<-twopq*100;fizzy<-q2*100
fizzy<-p2*100;mod<-twopq*100;flat<-q2*100
eFiz<-fizzy*2000;eMod<-mod*2000;eFlat<-flat*2000
p<-0.95;q<-0.05
p2<-p^2;twopq<-2*p*q;q2<-q^2
fizzy<-p2*100;mod<-twopq*100;flat<-q2*100
## b ## 1 point
oFiz<-1000;oMod<-100;oFlat<-900
expected<-c(fizzy<-p2*100;mod<-twopq*100;flat<-q2*100)
exp<-c(fizzy,mod,flat)
obs<-c(oFiz,oMod,oFlat)
sum((((obs-exp)^2)/obs))
chi2<-sum((((obs-exp)^2)/obs))
exp
obs
fizzy<-p2*100;mod<-twopq*100;flat<-q2*100
eFiz<-p2*2000;eMod<-twopq*2000;eFlat<-q2*2000
exp<-c(eFiz,eMod,eFlat)
obs<-c(oFiz,oMod,oFlat)
chi2<-sum((((obs-exp)^2)/obs))
chi2<-sum((((obs-exp)^2)/exp))
obs
exp
fmm<-.25;fmn<-.60;fnn<-.15
fmm<-.25;fmn<-.60;fnn<-.15
p<-fmm + (.5*fmn); q<-fnn + (.5*fmn)
obs<-c(fmm*3000,fmn*3000,fnn*3000)
p2<-p^2;twopq<-2*p*q;q2<-q^2
exp<-c(p2*3000,2pq*3000,q2*3000)
exp<-c(p2*3000,twopq*3000,q2*3000)
chi2<-sum((((obs-exp)^2)/exp))
sQQ<-20;sQR<-35;sRR<-45
rQQ<-30;rQR<-65;rRR<-5
library(ggplot2)
?mpg
data <- mpg
mpg
data
qplot(disp,hwy,data=mpg)
qplot(disp;,hwy,data=mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,color = class)
qplot(displ,hwy,data=mpg,size= class)
qplot(displ,hwy,data=mpg,size= class, color = class)
qplot(displ,hwy,data=mpg,size= class, color = class, shape = class)
qplot(displ,hwy,data=mpg,size= class, color = class, alpha = class)
qplot(displ,hwy,data=mpg, color = class, alpha = class)
qplot(displ,hwy,data=mpg, color = class, alpha = class + facet_grid(.~cyl))
qplot(displ,hwy,data=mpg) + facet_grid(.~cyl)
qplot(displ,hwy,data=mpg = color = class) + facet_grid(.~cyl)
qplot(displ,hwy,data=mpg ,color = class) + facet_grid(.~cyl)
qplot(displ,hwy,data=mpg ,color = class) + facet_grid(.~drv)
qplot(displ,hwy,data=mpg ,color = class) + facet_grid(drv~cyl)
qplot(displ,hwy,data=mpg ,color = class) + facet_wrap(drv~cyl)
qplot(displ,hwy,data=mpg ,color = class) + facet_grid(drv~cyl)
summary(iris)
qplot(Sepal.Length,Sepal.Width, data = iris, color = Species)
qplot(Sepal.Length,Sepal.Width, data = iris, color = Species)+ facet_grid(Petal.Length~Petal.Width)
qplot(displ,hwy,data=mpg ,color = class, geom = 'smooth') + facet_grid(drv~cyl)
qplot(displ,hwy,data=mpg ,color = class, geom = 'smooth')
qplot(displ,hwy,data=mpg ,color = class, geom = 'smooth') + facet_grid(class)
qplot(displ,hwy,data=mpg ,color = class, geom = 'smooth') + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = 'smooth', geom= 'point') + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = 'point', ) + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = 'smooth', ) + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = 'smooth' ) + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = ('point','smooth') ) + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = c('point','smooth') ) + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = c('point','boxplot') ) + facet_grid(class~.)
qplot(displ,hwy,data=mpg ,color = class, geom = c('point','boxplot') )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class, geom = c('point','boxplot') )# + facet_grid(class~.)
qplot(reorder(class,hwy),class,hwy,data=mpg ,color = class, geom = c('point','boxplot') )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class, geom = c('point','boxplot') )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class,reorder(class,hwy), geom = c('point','boxplot') )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class,reorder(hwy,class), geom = c('point','boxplot') )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class,reorder(hwy,class), geom = 'boxplot' )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class,reorder(mpg$hwy,mpg$class), geom = 'boxplot' )# + facet_grid(class~.)
qplot(class,hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
?reorder
qplot(reorder(hwy, FUN = median),class,hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
qplot(reorder(class,hwy, FUN = median),hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
qplot(reorder(class,hwy, FUN = mean),hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
qplot(reorder(class,hwy, FUN = sd),hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
qplot(reorder(class,-hwy, FUN = sd),hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
qplot(reorder(class,hwy, FUN = sd),hwy,data=mpg ,color = class, geom = 'boxplot' )# + facet_grid(class~.)
qplot(hwy,data=mpg,binwidth = 1)
qplot(hwy,data=mpg,binwidth = 2)
qplot(hwy,data=mpg,binwidth = 1)
qplot(carat, data = diamonds)
qplot(depth, data = diamonds)
qplot(depth, data = diamonds, binwidth = .1)
qplot(depth, data = diamonds, binwidth = .2)
qplot(depth, data = diamonds, binwidth = .2,color = cut)
qplot(depth, data = diamonds, binwidth = .2,fill = cut)
qplot(depth, data = diamonds, binwidth = .2,color = 'blue')
qplot(depth, data = diamonds, binwidth = .2,color = i('blue'))
qplot(depth, data = diamonds, binwidth = .2,color = I('blue'))
qplot(depth, data = diamonds, binwidth = .2,color = I('green'))
qplot(depth, data = diamonds, binwidth = .2,color = I('green'),fill = I('red'))
qplot(depth, data = diamonds, binwidth = .2,color = I('white'),fill = I('black'))
qplot(depth, data = diamonds, binwidth = .2,color = I('black'),fill = I('white'))
qplot(data = economics, aes(date,unemploy)) + geom_line()
economics
qplot(data = economics, aes(x=date,y=unemploy)) + geom_line()
names(economics)
summary(economics)
qplot(economics, x=date,y=unemploy)
qplot(data=economics, x=date,y=unemploy)
qplot(data=economics, x=date,y=unemploy) + geom_line()
getwd()
pl<-qplot(data=economics, x=date,y=unemploy) + geom_line()
ggsave('Desktop/plot.pdf', plot= pl)
summary(diamonds)
ggplot(data = diamonds, aes(x = color)) + geom_bar(color = cut)
ggplot(data = diamonds, x=color + geom_bar(color = cut)
ggplot(data = diamonds, x=color) + geom_bar(color = cut)
ggplot(data = diamonds, x=color) + geom_bar(color = cut)
qplot(x = color, data = diamonds)
qplot(x = color, data = diamonds, color = cut)
qplot(x = color, data = diamonds, color = cut, position = 'stack')
qplot(x = color, data = diamonds, color = cut, position = 'dodge')
qplot(x = color, data = diamonds, color = cut) + position_dodge()
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position='dodge')
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position='stack')
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position='identity')
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position='fill')
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position=c('fill','dodge'))
ggplot(diamonds,aes(factor(color),fill = factor(cut))) + geom_bar(position='dodge')
install.packages('plotly')
library(plotly)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
(gg <- ggplotly(p))
gg
ggplotly(p)
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity))) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
ggplotly(p)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
library(ggplot2)
library(plotly)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
names(diamonds)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = depth)
setwd(dir='Desktop/Spring 2016/CS 7001/Project_1/part_2/')
library(ggplot2)
library(plotly)
df13<-read.csv('output_data/new_2013.csv')
#create state codes
df13$codes<-as.factor(state.abb[match(df13$State,state.name)] )
# histograms of super-types of crime
hist(df13$Crimes_Against_Persons/df13$Population)
hist(df13$Crimes_Against_Property/df13$Population)
hist(df13$Crimes_Against_Society/df13$Population)
# transform counts into proportions (each offense/total population per 100,000 people)
props<-df13[, 7:ncol(df13)-2]/(df13$Population) # first find the proportion for each crime
prop13<-na.omit(cbind(df13[,c(1:6,69:70)],props))
# play around with some graphs to explore the data
plot_ly(prop13, x = Population, y = Crimes_Against_Persons, text = paste("Agency: ", Agency_Name),
mode = "markers", color = Agency_Type)
names(prop13)
head(prop13)
names(df13)
props<-df13[, 6:ncol(df13)-2]/(df13$Population) # first find the proportion for each crime
df13$codes<-as.factor(state.abb[match(df13$State,state.name)] )
df13<-read.csv('output_data/new_2013.csv')
#create state codes
df13$codes<-as.factor(state.abb[match(df13$State,state.name)] )
props<-df13[, 6:ncol(df13)-2]/(df13$Population) # first find the proportion for each crime
df13$Population
names(df13)
props<-df13[, 6:68]/(df13$Population) # first find the proportion for each crime
prop13<-na.omit(cbind(df13[,c(1:6,69:70)],props))
head(prop13)
plot_ly(prop13, x = Population, y = Crimes_Against_Persons, text = paste("Agency: ", Agency_Name),
mode = "markers", color = Agency_Type)
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
plot_ly(df13, z = Population,locations = codes, type = 'choropleth',
locationmode = 'USA-states', color = Population,colors = 'PuOr',
marker = list(line = l),colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
# play around with some graphs to explore the data
plot_ly(prop13, x = Population, y = Crimes_Against_Persons, text = paste("Agency: ", Agency_Name),
mode = "markers", color = Agency_Type)
plot_ly(prop13, x = Region,y = Crimes_Against_Persons, color = State, type = "box") %>%
layout(boxmode = "group")
plot_ly(prop13, x = Crimes_Against_Persons, color = Region, type = "box")
aggregate(df13$Population,by=df13$codes, FUN=sum)
aggregate(codes ~ Population, data = df13, FUN = sum)
aggregate(Population ~ codes, data = df13, FUN = sum)
states<-aggregate(Population ~ codes, data = df13, FUN = sum)
states<-aggregate(Population ~ codes, data = df13, FUN = sum)
names(states)
plot_ly(states, z = Population,locations = codes, type = 'choropleth',
locationmode = 'USA-states', color = Population,colors = 'PuOr',
marker = list(line = l),colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
plot_ly(states, z = Population,locations = codes, type = 'choropleth',
locationmode = 'USA-states', color = Population,colors = 'Purple',
marker = list(line = l),colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
plot_ly(states, z = Population,locations = codes, type = 'choropleth',
locationmode = 'USA-states', color = Population,colors = 'Purples',
marker = list(line = l),colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(states, z = Population,locations = codes, type = 'choropleth',
locationmode = 'USA-states', color = Population,colors = 'Purples',
marker = list(line = l),colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
plot_ly(states, z = Population,locations = codes, text=codes, type = 'choropleth',
locationmode = 'USA-states', color = Population,colors = 'Purples',
marker = list(line = l),colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
plot_ly(states, z = Population,locations = codes, text=codes, type = 'choropleth',
locationmode = 'USA-states', color = Population,colors = 'Reds',
marker = list(line = l),colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
names(df13)
states<-aggregate(Population, Total_Offenses ~ codes, data = df13, FUN = sum)
states<-aggregate(c(Population, Total_Offenses) ~ codes, data = df13, FUN = sum)
library(reshape2)
df_melt <- melt(df13, id = df13[,5:70])
df_melt <- melt(df13, id = c("Population","Total_Offenses",
"Crimes_Against_Persons","Crimes_Against_Property",
"Crimes_Against_Society" ))
aggregate(cbind(Population, Total_Offenses)~codes, data=df13, sum, na.rm=TRUE)
aggregate(cbind(names(df13))~codes, data=df13, sum, na.rm=TRUE)
aggregate(cbind(names(df13[,5:10]))~codes, data=df13, sum, na.rm=TRUE)
aggregate(cbind(names(df13[5:10]))~codes, data=df13, sum, na.rm=TRUE)
names(df13[5:10])
aggregate(cbind(Population, Total_Offenses,Crimes_Against_Persons,Crimes_Against_Property,Crimes_Against_Society)~codes, data=df13, sum, na.rm=TRUE)
states<-aggregate(cbind(Population, Total_Offenses,Crimes_Against_Persons,Crimes_Against_Property,Crimes_Against_Society)~codes, data=df13, sum, na.rm=TRUE)
hist(states$Population)
hist(states$Total_Offenses)
proSt<-states[,3:ncol(states)]/states$Population
proSt
plot_ly(proSt, z = Total_Offenses,locations = codes, text=codes, type = 'choropleth',
locationmode = 'USA-states', color = Total_Offenses,colors = 'Reds',
marker = list(line = l),colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
prost<-cbind(states[,1:2],proSt)
plot_ly(proSt, z = Total_Offenses,locations = codes, text=codes, type = 'choropleth',
locationmode = 'USA-states', color = Total_Offenses,colors = 'Reds',
marker = list(line = l),colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
plot_ly(prost, z = Total_Offenses,locations = codes, text=codes, type = 'choropleth',
locationmode = 'USA-states', color = Total_Offenses,colors = 'Reds',
marker = list(line = l),colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
# give state boundaries a white border
l <- list(color = toRGB("grey"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(prost, z = Total_Offenses,locations = codes, text=codes, type = 'choropleth',
locationmode = 'USA-states', color = Total_Offenses,colors = 'Reds',
marker = list(line = l),colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
# give state boundaries a white border
l <- list(color = toRGB("black"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(prost, z = Total_Offenses,locations = codes, text=codes, type = 'choropleth',
locationmode = 'USA-states', color = Total_Offenses,colors = 'Reds',
marker = list(line = l),colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
# give state boundaries a white border
l <- list(color = toRGB("black"), width = .5)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(prost, z = Total_Offenses,locations = codes, text=codes, type = 'choropleth',
locationmode = 'USA-states', color = Total_Offenses,colors = 'Reds',
marker = list(line = l),colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
# give state boundaries a white border
l <- list(color = toRGB("black"), width = .5)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = FALSE,
#lakecolor = toRGB('white')
)
plot_ly(prost, z = Total_Offenses,locations = codes, text=codes, type = 'choropleth',
locationmode = 'USA-states', color = Total_Offenses,colors = 'Reds',
marker = list(line = l),colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
# give state boundaries a white border
l <- list(color = toRGB("black"), width = .5)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('blue')
)
plot_ly(prost, z = Total_Offenses,locations = codes, text=codes, type = 'choropleth',
locationmode = 'USA-states', color = Total_Offenses,colors = 'Reds',
marker = list(line = l),colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g)
# give state boundaries a black border
l <- list(color = toRGB("black"), width = .5)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('gray')
)
plot_ly(prost, z = Total_Offenses,locations = codes, text=codes, type = 'choropleth',
locationmode = 'USA-states', color = Total_Offenses,colors = 'Reds',
marker = list(line = l),colorbar = list(title = "Total Offenses Rate")) %>%
layout(title = '2013 Crime Rates per Capita<br>(Hover for breakdown)', geo = g)
names(prost)
# give state boundaries a black border
l <- list(color = toRGB("black"), width = .5)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('gray')
)
plot_ly(prost, z = Crimes_Against_Persons,locations = codes, text=codes, type = 'choropleth',
locationmode = 'USA-states', color = Crimes_Against_Persons,colors = 'Reds',
marker = list(line = l),colorbar = list(title = "Total Offenses Rate")) %>%
layout(title = '2013 Crime Rates per Capita<br>(Hover for breakdown)', geo = g)
plot_ly(prost, z = Crimes_Against_Persons,locations = codes, text=paste0(codes, '<br>Population: ', Population), type = 'choropleth',
locationmode = 'USA-states', color = Crimes_Against_Persons,colors = 'Reds',
marker = list(line = l),colorbar = list(title = "Total Offenses Rate")) %>%
layout(title = '2013 Crime Rates per Capita<br>(Hover for breakdown)', geo = g)
plot_ly(prost, z = Crimes_Against_Persons,locations = codes, text=paste0('<br>Population: ', Population), type = 'choropleth',
locationmode = 'USA-states', color = Crimes_Against_Persons,colors = 'Reds',
marker = list(line = l),colorbar = list(title = "Total Offenses Rate")) %>%
layout(title = '2013 Crime Rates per Capita<br>(Hover for breakdown)', geo = g)
plot_ly(prost, z = Crimes_Against_Property,locations = codes, text=paste0('<br>Population: ', Population), type = 'choropleth',
locationmode = 'USA-states', color = Crimes_Against_Property,colors = 'Reds',
marker = list(line = l),colorbar = list(title = "Total Offenses Rate")) %>%
layout(title = '2013 Crime Rates per Capita<br>(Hover for breakdown)', geo = g)
plot_ly(prost, z = Crimes_Against_Society,locations = codes, text=paste0('<br>Population: ', Population), type = 'choropleth',
locationmode = 'USA-states', color = Crimes_Against_Society,colors = 'Reds',
marker = list(line = l),colorbar = list(title = "Total Offenses Rate")) %>%
layout(title = '2013 Crime Rates per Capita<br>(Hover for breakdown)', geo = g)
df13
qplot(prost,x=Population)
qplot(data =prost,x=Population)
qplot(data =prost,x=Crimes_Against_Society)
qplot(data =prost,x=Crimes_Against_Persons)
qplot(data =prost,x=Crimes_Against_Property)
qplot(data =prost,x=Crimes_Against_Property, y= Population)
qplot(data =prost,y=Crimes_Against_Property, x= Population)
qplot(data =prost,y=Crimes_Against_Persons, x= Population)
qplot(data =prost,y=Crimes_Against_Society, x= Population)
names(prop13)
plot_ly(prop13, x = Region,y = Homicide_Offenses, color = State, type = "box") %>%
layout(boxmode = "group")
plot_ly(prop13, x = Homicide_Offenses, color = Region, type = "box")
plot_ly(prop13, x = Total_Offenses, color = Region, type = "box")
head(prop13)
df13<-read.csv('output_data/new_2013.csv')
#create state codes
df13$codes<-as.factor(state.abb[match(df13$State,state.name)] )
head(df13)
names(df13)
props<-df13[, 6:68]/(df13$Population) # first find the proportion for each crime
head(props)
prop13<-na.omit(cbind(df13[,c(1:5,69:70)],props))
states<-aggregate(cbind(Population, Total_Offenses,Crimes_Against_Persons,Crimes_Against_Property,Crimes_Against_Society)~codes, data=df13, sum, na.rm=TRUE)
l <- list(color = toRGB("black"), width = .5)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('gray')
)
plot_ly(prost, z = Crimes_Against_Society,locations = codes, text=paste0('<br>Population: ', Population), type = 'choropleth',
locationmode = 'USA-states', color = Crimes_Against_Society,colors = 'Reds',
marker = list(line = l),colorbar = list(title = "Total Offenses Rate")) %>%
layout(title = '2013 Crime Rates per Capita<br>(Hover for breakdown)', geo = g)
#find proportions based off of population for each state
proSt<-states[,3:ncol(states)]/states$Population
prost<-cbind(states[,1:2],proSt)
plot_ly(prost, z = Crimes_Against_Society,locations = codes, text=paste0('<br>Population: ', Population), type = 'choropleth',
locationmode = 'USA-states', color = Crimes_Against_Society,colors = 'Reds',
marker = list(line = l),colorbar = list(title = "Total Offenses Rate")) %>%
layout(title = '2013 Crime Rates per Capita<br>(Hover for breakdown)', geo = g)
plot_ly(prost, z = Total_Offenses,locations = codes, text=paste0('<br>Population: ', Population), type = 'choropleth',
locationmode = 'USA-states', color = Total_Offenses,colors = 'Reds',
marker = list(line = l),colorbar = list(title = "Total Offenses Rate")) %>%
layout(title = '2013 Crime Rates per Capita<br>(Hover for breakdown)', geo = g)
